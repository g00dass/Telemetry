version: '3.4'

services:
    netcoreapilinux:
        image: ${DOCKER_REGISTRY-}netcoreapilinux
        build:
            context: .
            dockerfile: NetCoreApiLinux/Dockerfile
        environment:
          MongoDbSettings__Host: mongo
    seq:
        image: datalust/seq:latest
        environment:
          - ACCEPT_EULA=Y
        volumes:
          - ./logs:/data
        ports:
          - "83:80"
          - "5341:5341"
    mongo:
        image: mongo
        hostname: mongo
        command: --replSet telemetry-rs
        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: example
            MONGO_INITDB_DATABASE: Telemetry
            MONGO_REPLICA_SET_NAME: telemetry-rs
        healthcheck:
            test: test $$(echo "rs.initiate().ok || rs.status().ok" | mongo -u root -p example --quiet) -eq 1
            timeout: 5s
            interval: 10s
        ports:
          - 27017:27017
    mongo-express:
        image: mongo-express
        restart: always
        ports:
          - 8081:8081
        environment:
          ME_CONFIG_MONGODB_ADMINUSERNAME: root
          ME_CONFIG_MONGODB_ADMINPASSWORD: example
        depends_on:
          - mongo
    zookeeper:
        image: wurstmeister/zookeeper
        ports:
          - "2181:2181"
    kafka:
        image: wurstmeister/kafka
        ports:
          - "9092:9092"
        environment:
          KAFKA_ADVERTISED_HOST_NAME: kafka
          KAFKA_CREATE_TOPICS: "CriticalEvents.V.1:1:1"
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
    notifierdaemon:
        image: ${DOCKER_REGISTRY-}notifier
        build:
            context: .
            dockerfile: NotifierDaemon/Dockerfile
        depends_on:
          - kafka
