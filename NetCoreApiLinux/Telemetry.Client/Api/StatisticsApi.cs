/*
 * Statistics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Telemetry.Client.Client;
using Telemetry.Client.Model;

namespace Telemetry.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatisticsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get statistics meta for all devices
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AppInfo&gt;</returns>
        List<AppInfo> StatisticsApiAppInfoAllGet();

        /// <summary>
        /// Get statistics meta for all devices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AppInfo&gt;</returns>
        ApiResponse<List<AppInfo>> StatisticsApiAppInfoAllGetWithHttpInfo();
        /// <summary>
        /// Delete all statistics events history for device by id
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void StatisticsApiAppInfoIdEventsHistoryDelete(Guid id);

        /// <summary>
        /// Delete all statistics events history for device by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StatisticsApiAppInfoIdEventsHistoryDeleteWithHttpInfo(Guid id);
        /// <summary>
        /// Get statistics events history for device by id
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>List&lt;StatisticsEvent&gt;</returns>
        List<StatisticsEvent> StatisticsApiAppInfoIdEventsHistoryGet(Guid id);

        /// <summary>
        /// Get statistics events history for device by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;StatisticsEvent&gt;</returns>
        ApiResponse<List<StatisticsEvent>> StatisticsApiAppInfoIdEventsHistoryGetWithHttpInfo(Guid id);
        /// <summary>
        /// Get statistics meta for device by id
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>AppInfo</returns>
        AppInfo StatisticsApiAppInfoIdGet(Guid id);

        /// <summary>
        /// Get statistics meta for device by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of AppInfo</returns>
        ApiResponse<AppInfo> StatisticsApiAppInfoIdGetWithHttpInfo(Guid id);
        /// <summary>
        /// Create or update statistics meta and merge events history
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appInfoRequest"> (optional)</param>
        /// <returns></returns>
        void StatisticsApiAppInfoPost(AppInfoRequest appInfoRequest = default(AppInfoRequest));

        /// <summary>
        /// Create or update statistics meta and merge events history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appInfoRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StatisticsApiAppInfoPostWithHttpInfo(AppInfoRequest appInfoRequest = default(AppInfoRequest));
        /// <summary>
        /// Get StatisticsEventTypes for all types
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;StatisticsEventType&gt;</returns>
        List<StatisticsEventType> StatisticsApiEventTypesGet();

        /// <summary>
        /// Get StatisticsEventTypes for all types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;StatisticsEventType&gt;</returns>
        ApiResponse<List<StatisticsEventType>> StatisticsApiEventTypesGetWithHttpInfo();
        /// <summary>
        /// Create or update StatisticsEventTypes
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticsEventType"> (optional)</param>
        /// <returns></returns>
        void StatisticsApiEventTypesPost(List<StatisticsEventType> statisticsEventType = default(List<StatisticsEventType>));

        /// <summary>
        /// Create or update StatisticsEventTypes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticsEventType"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StatisticsApiEventTypesPostWithHttpInfo(List<StatisticsEventType> statisticsEventType = default(List<StatisticsEventType>));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatisticsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get statistics meta for all devices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AppInfo&gt;</returns>
        System.Threading.Tasks.Task<List<AppInfo>> StatisticsApiAppInfoAllGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get statistics meta for all devices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AppInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AppInfo>>> StatisticsApiAppInfoAllGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete all statistics events history for device by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StatisticsApiAppInfoIdEventsHistoryDeleteAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete all statistics events history for device by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StatisticsApiAppInfoIdEventsHistoryDeleteWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get statistics events history for device by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;StatisticsEvent&gt;</returns>
        System.Threading.Tasks.Task<List<StatisticsEvent>> StatisticsApiAppInfoIdEventsHistoryGetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get statistics events history for device by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;StatisticsEvent&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<StatisticsEvent>>> StatisticsApiAppInfoIdEventsHistoryGetWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get statistics meta for device by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppInfo</returns>
        System.Threading.Tasks.Task<AppInfo> StatisticsApiAppInfoIdGetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get statistics meta for device by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<AppInfo>> StatisticsApiAppInfoIdGetWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create or update statistics meta and merge events history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appInfoRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StatisticsApiAppInfoPostAsync(AppInfoRequest appInfoRequest = default(AppInfoRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create or update statistics meta and merge events history
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appInfoRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StatisticsApiAppInfoPostWithHttpInfoAsync(AppInfoRequest appInfoRequest = default(AppInfoRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get StatisticsEventTypes for all types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;StatisticsEventType&gt;</returns>
        System.Threading.Tasks.Task<List<StatisticsEventType>> StatisticsApiEventTypesGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get StatisticsEventTypes for all types
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;StatisticsEventType&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<StatisticsEventType>>> StatisticsApiEventTypesGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create or update StatisticsEventTypes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticsEventType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StatisticsApiEventTypesPostAsync(List<StatisticsEventType> statisticsEventType = default(List<StatisticsEventType>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create or update StatisticsEventTypes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticsEventType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StatisticsApiEventTypesPostWithHttpInfoAsync(List<StatisticsEventType> statisticsEventType = default(List<StatisticsEventType>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatisticsApi : IStatisticsApiSync, IStatisticsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StatisticsApi : IStatisticsApi
    {
        private Telemetry.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatisticsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatisticsApi(String basePath)
        {
            this.Configuration = Telemetry.Client.Client.Configuration.MergeConfigurations(
                Telemetry.Client.Client.GlobalConfiguration.Instance,
                new Telemetry.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Telemetry.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Telemetry.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Telemetry.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StatisticsApi(Telemetry.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Telemetry.Client.Client.Configuration.MergeConfigurations(
                Telemetry.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Telemetry.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Telemetry.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Telemetry.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatisticsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public StatisticsApi(Telemetry.Client.Client.ISynchronousClient client, Telemetry.Client.Client.IAsynchronousClient asyncClient, Telemetry.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Telemetry.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Telemetry.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Telemetry.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Telemetry.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Telemetry.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get statistics meta for all devices 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AppInfo&gt;</returns>
        public List<AppInfo> StatisticsApiAppInfoAllGet()
        {
            Telemetry.Client.Client.ApiResponse<List<AppInfo>> localVarResponse = StatisticsApiAppInfoAllGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get statistics meta for all devices 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AppInfo&gt;</returns>
        public Telemetry.Client.Client.ApiResponse<List<AppInfo>> StatisticsApiAppInfoAllGetWithHttpInfo()
        {
            Telemetry.Client.Client.RequestOptions localVarRequestOptions = new Telemetry.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Telemetry.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Telemetry.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<AppInfo>>("/statistics/api/appInfo/all", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsApiAppInfoAllGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics meta for all devices 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;AppInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<AppInfo>> StatisticsApiAppInfoAllGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Telemetry.Client.Client.ApiResponse<List<AppInfo>> localVarResponse = await StatisticsApiAppInfoAllGetWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get statistics meta for all devices 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;AppInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<Telemetry.Client.Client.ApiResponse<List<AppInfo>>> StatisticsApiAppInfoAllGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Telemetry.Client.Client.RequestOptions localVarRequestOptions = new Telemetry.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Telemetry.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Telemetry.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<AppInfo>>("/statistics/api/appInfo/all", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsApiAppInfoAllGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all statistics events history for device by id 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void StatisticsApiAppInfoIdEventsHistoryDelete(Guid id)
        {
            StatisticsApiAppInfoIdEventsHistoryDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Delete all statistics events history for device by id 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Telemetry.Client.Client.ApiResponse<Object> StatisticsApiAppInfoIdEventsHistoryDeleteWithHttpInfo(Guid id)
        {
            Telemetry.Client.Client.RequestOptions localVarRequestOptions = new Telemetry.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Telemetry.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Telemetry.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Telemetry.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/statistics/api/appInfo/{id}/events-history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsApiAppInfoIdEventsHistoryDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete all statistics events history for device by id 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StatisticsApiAppInfoIdEventsHistoryDeleteAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await StatisticsApiAppInfoIdEventsHistoryDeleteWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Delete all statistics events history for device by id 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Telemetry.Client.Client.ApiResponse<Object>> StatisticsApiAppInfoIdEventsHistoryDeleteWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Telemetry.Client.Client.RequestOptions localVarRequestOptions = new Telemetry.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Telemetry.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Telemetry.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Telemetry.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/statistics/api/appInfo/{id}/events-history", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsApiAppInfoIdEventsHistoryDelete", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics events history for device by id 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>List&lt;StatisticsEvent&gt;</returns>
        public List<StatisticsEvent> StatisticsApiAppInfoIdEventsHistoryGet(Guid id)
        {
            Telemetry.Client.Client.ApiResponse<List<StatisticsEvent>> localVarResponse = StatisticsApiAppInfoIdEventsHistoryGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get statistics events history for device by id 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of List&lt;StatisticsEvent&gt;</returns>
        public Telemetry.Client.Client.ApiResponse<List<StatisticsEvent>> StatisticsApiAppInfoIdEventsHistoryGetWithHttpInfo(Guid id)
        {
            Telemetry.Client.Client.RequestOptions localVarRequestOptions = new Telemetry.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Telemetry.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Telemetry.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Telemetry.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<List<StatisticsEvent>>("/statistics/api/appInfo/{id}/events-history", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsApiAppInfoIdEventsHistoryGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics events history for device by id 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;StatisticsEvent&gt;</returns>
        public async System.Threading.Tasks.Task<List<StatisticsEvent>> StatisticsApiAppInfoIdEventsHistoryGetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Telemetry.Client.Client.ApiResponse<List<StatisticsEvent>> localVarResponse = await StatisticsApiAppInfoIdEventsHistoryGetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get statistics events history for device by id 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;StatisticsEvent&gt;)</returns>
        public async System.Threading.Tasks.Task<Telemetry.Client.Client.ApiResponse<List<StatisticsEvent>>> StatisticsApiAppInfoIdEventsHistoryGetWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Telemetry.Client.Client.RequestOptions localVarRequestOptions = new Telemetry.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Telemetry.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Telemetry.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Telemetry.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<StatisticsEvent>>("/statistics/api/appInfo/{id}/events-history", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsApiAppInfoIdEventsHistoryGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics meta for device by id 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>AppInfo</returns>
        public AppInfo StatisticsApiAppInfoIdGet(Guid id)
        {
            Telemetry.Client.Client.ApiResponse<AppInfo> localVarResponse = StatisticsApiAppInfoIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get statistics meta for device by id 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of AppInfo</returns>
        public Telemetry.Client.Client.ApiResponse<AppInfo> StatisticsApiAppInfoIdGetWithHttpInfo(Guid id)
        {
            Telemetry.Client.Client.RequestOptions localVarRequestOptions = new Telemetry.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Telemetry.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Telemetry.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Telemetry.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get<AppInfo>("/statistics/api/appInfo/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsApiAppInfoIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get statistics meta for device by id 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AppInfo</returns>
        public async System.Threading.Tasks.Task<AppInfo> StatisticsApiAppInfoIdGetAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Telemetry.Client.Client.ApiResponse<AppInfo> localVarResponse = await StatisticsApiAppInfoIdGetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get statistics meta for device by id 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AppInfo)</returns>
        public async System.Threading.Tasks.Task<Telemetry.Client.Client.ApiResponse<AppInfo>> StatisticsApiAppInfoIdGetWithHttpInfoAsync(Guid id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Telemetry.Client.Client.RequestOptions localVarRequestOptions = new Telemetry.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Telemetry.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Telemetry.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", Telemetry.Client.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<AppInfo>("/statistics/api/appInfo/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsApiAppInfoIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or update statistics meta and merge events history 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appInfoRequest"> (optional)</param>
        /// <returns></returns>
        public void StatisticsApiAppInfoPost(AppInfoRequest appInfoRequest = default(AppInfoRequest))
        {
            StatisticsApiAppInfoPostWithHttpInfo(appInfoRequest);
        }

        /// <summary>
        /// Create or update statistics meta and merge events history 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appInfoRequest"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Telemetry.Client.Client.ApiResponse<Object> StatisticsApiAppInfoPostWithHttpInfo(AppInfoRequest appInfoRequest = default(AppInfoRequest))
        {
            Telemetry.Client.Client.RequestOptions localVarRequestOptions = new Telemetry.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Telemetry.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Telemetry.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = appInfoRequest;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/statistics/api/appInfo", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsApiAppInfoPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or update statistics meta and merge events history 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appInfoRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StatisticsApiAppInfoPostAsync(AppInfoRequest appInfoRequest = default(AppInfoRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await StatisticsApiAppInfoPostWithHttpInfoAsync(appInfoRequest, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create or update statistics meta and merge events history 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="appInfoRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Telemetry.Client.Client.ApiResponse<Object>> StatisticsApiAppInfoPostWithHttpInfoAsync(AppInfoRequest appInfoRequest = default(AppInfoRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Telemetry.Client.Client.RequestOptions localVarRequestOptions = new Telemetry.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Telemetry.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Telemetry.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = appInfoRequest;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/statistics/api/appInfo", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsApiAppInfoPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get StatisticsEventTypes for all types 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;StatisticsEventType&gt;</returns>
        public List<StatisticsEventType> StatisticsApiEventTypesGet()
        {
            Telemetry.Client.Client.ApiResponse<List<StatisticsEventType>> localVarResponse = StatisticsApiEventTypesGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get StatisticsEventTypes for all types 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;StatisticsEventType&gt;</returns>
        public Telemetry.Client.Client.ApiResponse<List<StatisticsEventType>> StatisticsApiEventTypesGetWithHttpInfo()
        {
            Telemetry.Client.Client.RequestOptions localVarRequestOptions = new Telemetry.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Telemetry.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Telemetry.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get<List<StatisticsEventType>>("/statistics/api/event-types", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsApiEventTypesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get StatisticsEventTypes for all types 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;StatisticsEventType&gt;</returns>
        public async System.Threading.Tasks.Task<List<StatisticsEventType>> StatisticsApiEventTypesGetAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Telemetry.Client.Client.ApiResponse<List<StatisticsEventType>> localVarResponse = await StatisticsApiEventTypesGetWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get StatisticsEventTypes for all types 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;StatisticsEventType&gt;)</returns>
        public async System.Threading.Tasks.Task<Telemetry.Client.Client.ApiResponse<List<StatisticsEventType>>> StatisticsApiEventTypesGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Telemetry.Client.Client.RequestOptions localVarRequestOptions = new Telemetry.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = Telemetry.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Telemetry.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<List<StatisticsEventType>>("/statistics/api/event-types", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsApiEventTypesGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or update StatisticsEventTypes 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticsEventType"> (optional)</param>
        /// <returns></returns>
        public void StatisticsApiEventTypesPost(List<StatisticsEventType> statisticsEventType = default(List<StatisticsEventType>))
        {
            StatisticsApiEventTypesPostWithHttpInfo(statisticsEventType);
        }

        /// <summary>
        /// Create or update StatisticsEventTypes 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticsEventType"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Telemetry.Client.Client.ApiResponse<Object> StatisticsApiEventTypesPostWithHttpInfo(List<StatisticsEventType> statisticsEventType = default(List<StatisticsEventType>))
        {
            Telemetry.Client.Client.RequestOptions localVarRequestOptions = new Telemetry.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json",
                "text/json",
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };

            var localVarContentType = Telemetry.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Telemetry.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = statisticsEventType;


            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/statistics/api/event-types", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsApiEventTypesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or update StatisticsEventTypes 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticsEventType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StatisticsApiEventTypesPostAsync(List<StatisticsEventType> statisticsEventType = default(List<StatisticsEventType>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await StatisticsApiEventTypesPostWithHttpInfoAsync(statisticsEventType, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Create or update StatisticsEventTypes 
        /// </summary>
        /// <exception cref="Telemetry.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="statisticsEventType"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Telemetry.Client.Client.ApiResponse<Object>> StatisticsApiEventTypesPostWithHttpInfoAsync(List<StatisticsEventType> statisticsEventType = default(List<StatisticsEventType>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Telemetry.Client.Client.RequestOptions localVarRequestOptions = new Telemetry.Client.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/_*+json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
            };


            var localVarContentType = Telemetry.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Telemetry.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = statisticsEventType;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/statistics/api/event-types", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StatisticsApiEventTypesPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
