/*
 * Statistics API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Telemetry.Client.Client.OpenAPIDateConverter;

namespace Telemetry.Client.Model
{
    /// <summary>
    /// AppInfoRequest
    /// </summary>
    [DataContract(Name = "AppInfoRequest")]
    public partial class AppInfoRequest : IEquatable<AppInfoRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AppInfoRequest" /> class.
        /// </summary>
        /// <param name="appInfo">appInfo.</param>
        /// <param name="events">events.</param>
        public AppInfoRequest(AppInfo appInfo = default(AppInfo), List<StatisticsEvent> events = default(List<StatisticsEvent>))
        {
            this.AppInfo = appInfo;
            this.Events = events;
        }

        /// <summary>
        /// Gets or Sets AppInfo
        /// </summary>
        [DataMember(Name = "appInfo", EmitDefaultValue = false)]
        public AppInfo AppInfo { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [DataMember(Name = "events", EmitDefaultValue = true)]
        public List<StatisticsEvent> Events { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppInfoRequest {\n");
            sb.Append("  AppInfo: ").Append(AppInfo).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AppInfoRequest);
        }

        /// <summary>
        /// Returns true if AppInfoRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AppInfoRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppInfoRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AppInfo == input.AppInfo ||
                    (this.AppInfo != null &&
                    this.AppInfo.Equals(input.AppInfo))
                ) && 
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    input.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AppInfo != null)
                    hashCode = hashCode * 59 + this.AppInfo.GetHashCode();
                if (this.Events != null)
                    hashCode = hashCode * 59 + this.Events.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
